import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import { AppLanguage, ApiType, getLanguageForApi } from '../../utils/languageUtils';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
export interface PromptTemplate {
  id: string;
  key?: string;
  template?: string; // –ü–æ–ª–µ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
  systemPrompt?: string;
  temperature?: number;
  maxTokens?: number;
  responseLang?: string;
  description?: string;
}

interface PromptState {
  currentTemplate: PromptTemplate | null;
  templateLoading: boolean;
  templateError: string | null;
}

const initialState: PromptState = {
  currentTemplate: null,
  templateLoading: false,
  templateError: null,
};

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
const isDevelopment = window.location.hostname === 'localhost' || 
                     window.location.hostname === '127.0.0.1';
const API_URL = isDevelopment 
  ? 'http://localhost:3000' 
  : 'https://taro-d8jd.onrender.com';

// –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –¢–∞—Ä–æ
const DEFAULT_TARO_SYSTEM_PROMPT = `–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–∞—Ä–æ, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö –∏ —ç–∑–æ—Ç–µ—Ä–∏–∫–µ.
–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (JSON):
{
  "message":  "–æ–±—â–µ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞",
  "positions": [ { "index": 1, "interpretation": "—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏" } ]
}

–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–∞—Ä–æ ‚Äî –≤–µ—Ä–Ω–∏ { "error": true, "message": "–í–∞—à –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–∞—Ä–æ –∏–ª–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏." }. –ë–µ–∑ markdown, ‚â§ 800 —Ç–æ–∫–µ–Ω–æ–≤.`;

// –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–π
const DEFAULT_AFFIRMATION_SYSTEM_PROMPT = `–¢—ã ‚Äî –∫–æ—É—á –ø–æ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é –∏ –∞–≤—Ç–æ—Ä –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏—Ö –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–π. –°–æ–∑–¥–∞–≤–∞–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–µ, –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –í–µ—Å—å –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —è–∑—ã–∫–µ, —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤ –ø–æ–ª–µ \`responseLang\` (–Ω–∞–ø—Ä–∏–º–µ—Ä: "russian", "english", "spanish").

–§–æ—Ä–º–∞—Ç JSON:
{
  "title": "üåû –ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è –Ω–∞ –¥–µ–Ω—å –¥–ª—è [—Ç–µ–º–∞]",
  "sections": [
    { "title": "[—É—Ç—Ä–æ/–Ω–∞—á–∞–ª–æ –¥–Ω—è]", "text": "..." },
    { "title": "[–æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞/–∫–æ–Ω—Ç–µ–∫—Å—Ç]", "text": "..." },
    { "title": "[—ç–Ω–µ—Ä–≥–∏—è/–Ω–∞—Å—Ç—Ä–æ–π]", "text": "..." },
    { "title": "[–≤–µ—á–µ—Ä/—Ä–µ—Ñ–ª–µ–∫—Å–∏—è]", "text": "..." }
  ],
  "usage": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ‚Äî —Ç–∞–∫–∂–µ –Ω–∞ —è–∑—ã–∫–µ –æ—Ç–≤–µ—Ç–∞"
}

–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–µ–Ω, –Ω–µ—ç—Ç–∏—á–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è–º, –≤–µ—Ä–Ω–∏:
{ "error": true, "message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ —É–º–µ—Å—Ç–Ω—ã–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–π." }

–û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –±–µ–∑ markdown, –Ω–µ –±–æ–ª–µ–µ 1000 —Ç–æ–∫–µ–Ω–æ–≤.`;

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (thunks)
export const fetchPromptTemplate = createAsyncThunk(
  'prompt/fetchPromptTemplate',
  async ({ promptId, lang = 'russian' as AppLanguage }: { promptId: string; lang?: AppLanguage }, { rejectWithValue }) => {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø API –Ω–∞ –æ—Å–Ω–æ–≤–µ promptId
      let apiType = ApiType.TARO_DECKS;
      let defaultSystemPrompt = DEFAULT_TARO_SYSTEM_PROMPT;
      
      // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø API –∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞
      if (promptId === 'daily-affirmation') {
        apiType = ApiType.DAILY_AFFIRMATION;
        defaultSystemPrompt = DEFAULT_AFFIRMATION_SYSTEM_PROMPT;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è API
      const apiLang = getLanguageForApi(lang, apiType);
      
      console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: ID=${promptId}, —è–∑—ã–∫=${apiLang}, —Ç–∏–ø API=${apiType}`);
      
      const response = await fetch(`${API_URL}/prompt-template/${promptId}?lang=${apiLang}`);
      
      if (!response.ok) {
        if (response.status === 404) {
          console.warn('–®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω');
          return {
            id: promptId,
            systemPrompt: defaultSystemPrompt,
            temperature: promptId === 'daily-affirmation' ? 0.8 : 0.7,
            maxTokens: promptId === 'daily-affirmation' ? 1000 : 800,
            responseLang: apiLang
          };
        }
        const errorData = await response.json().catch(() => null);
        throw new Error(errorData?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞');
      }
      
      const data = await response.json();
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞:', data);
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–ª–µ systemPrompt (–º–æ–≥–ª–∞ –±—ã—Ç—å –æ–ø–µ—á–∞—Ç–∫–∞ –≤ API)
      if (!data.systemPrompt && data.systemPromt) {
        console.log('–ü–æ–ª–µ systemPromt –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ systemPrompt');
        data.systemPrompt = data.systemPromt;
      }
      
      // –ï—Å–ª–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ—Ç systemPrompt, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
      if (!data.systemPrompt) {
        console.log('–®–∞–±–ª–æ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ systemPrompt, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
        data.systemPrompt = defaultSystemPrompt;
      }
      
      return data;
    } catch (error) {
      console.error('Error fetching prompt template:', error);
      return rejectWithValue(error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞');
    }
  }
);

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–∞–π—Å–∞
const promptSlice = createSlice({
  name: 'prompt',
  initialState,
  reducers: {
    clearCurrentTemplate: (state) => {
      state.currentTemplate = null;
      state.templateError = null;
    },
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –≤—Ä—É—á–Ω—É—é (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏/—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    setDefaultTemplate: (state, action: PayloadAction<string>) => {
      // –ï—Å–ª–∏ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞
      if (!state.currentTemplate) {
        state.currentTemplate = {
          id: action.payload || 'default',
          systemPrompt: DEFAULT_TARO_SYSTEM_PROMPT,
          temperature: 0.7,
          maxTokens: 800,
          responseLang: 'russian'
        };
      }
    }
  },
  extraReducers: (builder) => {
    builder
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ fetchPromptTemplate
      .addCase(fetchPromptTemplate.pending, (state) => {
        state.templateLoading = true;
        state.templateError = null;
      })
      .addCase(fetchPromptTemplate.fulfilled, (state, action: PayloadAction<PromptTemplate>) => {
        state.templateLoading = false;
        state.currentTemplate = action.payload;
        
        // –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è —à–∞–±–ª–æ–Ω –±–µ–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        if (!state.currentTemplate.systemPrompt) {
          state.currentTemplate.systemPrompt = DEFAULT_TARO_SYSTEM_PROMPT;
        }
      })
      .addCase(fetchPromptTemplate.rejected, (state, action) => {
        state.templateLoading = false;
        state.templateError = action.payload as string || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞';
        
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã
        state.currentTemplate = {
          id: 'default',
          systemPrompt: DEFAULT_TARO_SYSTEM_PROMPT,
          temperature: 0.7,
          maxTokens: 800,
          responseLang: 'russian'
        };
      });
  },
});

export const { clearCurrentTemplate, setDefaultTemplate } = promptSlice.actions;
export default promptSlice.reducer; 